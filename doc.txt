*************Stripe payment gateway
Simply create an account of stripe
login
go to developers section grab your keys

Publishable keys goes for front end 
Secret keys goes for backend

keep these keys in dotenv file.

//Backend


we will be using some packages for backend simple run to install them

> npm install cors dotenv express nodemon uuid stripe

//Index.js

const cors = require('cors');
const dotenv = require('dotenv')
const express = require('express');
// const uuid = require('uuid').v5;
const { v4: uuidv4 } = require('uuid');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const app = express();
app.use(express.json());
app.use(cors());

dotenv.config({ path: './config.env' }); //dont forget to create config.env file in your root directory

//routes
app.get('/', (req, res) => {
  res.send('Just for testing I am sending this to the client side.');
});

app.post('/payment', (req, res) => {
  const { product, token } = req.body;
  console.log('PRODUCT: ', product);
  console.log('PRODUCT PRICE: ', product.price);
  const idempotencyKey = uuidv4(); //prevent user to get chagred twice for the same product

  return stripe.customers
    .create({
      email: token.email,
      source: token.id,
    })
    .then((customer) => {
      // have access to the customer object
      return stripe.charges
        .create(
          {
            amount: product.price * 100, // *100 to convert it into dollar from cents
            currency: 'usd',
            customer: customer.id, // set the customer id
            description: `Purchase of ${product.name}`,
            shipping: {
              name: token.card.name,
              address: {
                country: token.card.address_country,
              },
            },
          },
          {
            idempotencyKey,
          }
        )
        .then((result) => res.status(200).json(result))
        .catch((err) => {
          console.log('ERROR: ', err);
        });
    });
});

//listening
app.listen(8282, () => console.log('Listening at port 8282'));

//FrontEnd

for frontend we will be using 
> npm install StripeCheckout

//App.js
import logo from './logo.svg';
import './App.css';
import StripeCheckout from 'react-stripe-checkout';
import { useState } from 'react';

function App() {
  const [product, setProduct] = useState({
    name: 'React from FB',
    price: 10,
    productBy: 'facebook',
  });

  const makePayment = (token) => {
    const body = {
      token,
      product,
    };
    const headers = {
      'Content-Type': 'application/json',
    };

    //stripe do not work with http make sure to use https
    return fetch(`http://localhost:8282/payment`, {
      method: 'POST',
      headers,
      body: JSON.stringify(body),
    })
      .then((response) => {
        console.log('RESPONSE: ', response);
        const { status } = response;

        console.log('STATUS: ', status);
      })
      .catch((err) => console.log(err));
  };
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <StripeCheckout
          stripeKey={process.env.REACT_APP_KEY}
          token={makePayment}
          name="Buy React"
          amount={product.price * 100}
          shippingAddress
          billingAddress
        >
          <button className="btn.large blue">
            Buy React in just {product.price}
          </button>
        </StripeCheckout>
      </header>
    </div>
  );
}

export default App;


//In your .env file

REACT_APP_KEY = your_key

here REACT_APP_ is necessary its a standard.



NOTE:
For test mode

name: any_name
email: any_email
any_postal_address
any_city
card number: 4242 4242 4242
CVC: 123
Date: any


to check your payments simply go to events on stripe website